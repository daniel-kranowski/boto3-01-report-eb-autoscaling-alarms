# Finds the beanstalk environment having the specified resource (e.g. ASG).
#
# AWSCLI does not offer a way to do it directly.  If all you have is the resource id, then you need to laboriously
# do the following:
#   * Get all environment ids or names
#   * Call describe-environment-resources for each env til you find the resource
# So we automate that here...
#
# In the absence of explicit config for ASG name, then beanstalk creates the ASG with a long autogenerated name.
# As those pile up it becomes impractical to visually associate the ASG with its beanstalk env, hence this automation.
#
# See http://boto3.readthedocs.io/en/latest/reference/services/elasticbeanstalk.html#ElasticBeanstalk.Client.describe_environment_resources

import boto3.session
from pprint import pformat
from report_eb_autoscaling_alarms import aws_cache

_eb_client = None


def init_client(profile_name, region_name):
    eb_session = boto3.session.Session(profile_name=profile_name, region_name=region_name)
    global _eb_client
    _eb_client = eb_session.client('elasticbeanstalk')
    

def get_envs(refresh_cache=False):
    key = 'describe_environments'
    if aws_cache.has_key(key) and not refresh_cache:
        return aws_cache.cache_get(key)
    envs = _eb_client.describe_environments()
    aws_cache.cache_put(key, envs)
    return envs


def get_resources(env_name, refresh_cache=False):
    key = 'describe_environment_resources-' + env_name
    if aws_cache.has_key(key) and not refresh_cache:
        return aws_cache.cache_get(key, False)
    resources = _eb_client.describe_environment_resources(EnvironmentName=env_name)
    aws_cache.cache_put(key, resources)
    return resources


# tgt_resource =>
#     {
#        resource_type: criteria
#     }
#
# criteria =>
#     {
#        tgt_criterion: tgt_value
#     }
#
# Example tgt_resource:
#   {'AutoScalingGroups': {'Name': '<long name string>'}}
#   {'LoadBalancers': {'Name': '<long name string>'}}
#   {'LaunchConfigurations': {'Name': '<long name string>'}}
#
def find_env_with_resource(tgt_resource, refresh_cache = False):
    print('Looking for env with this resource: {}'.format(pformat(tgt_resource)))
    envs = get_envs(refresh_cache)
    for env in envs['Environments']:
        env_name = env['EnvironmentName']
        resources = get_resources(env_name, refresh_cache)
        if match_resource(resources, tgt_resource):
            print('Found resource in env {}'.format(env_name))
            return env_name
    print('Not found')
    return ''


# Given the output from describe-environment-resources, return True if the tgt_resource is found there.
def match_resource(cur_resources, tgt_resource):
    for tgt_resource_type, tgt_criteria in tgt_resource.items():
        if tgt_resource_type in cur_resources['EnvironmentResources']:
            cur_typed_resources = cur_resources['EnvironmentResources'][tgt_resource_type]
            for tgt_criterion, tgt_value in tgt_criteria.items():
                for cur_resource in cur_typed_resources:
                    if tgt_criterion in cur_resource and cur_resource[tgt_criterion] == tgt_value:
                        return True
    return False


